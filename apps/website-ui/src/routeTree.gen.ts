/* prettier-ignore-start */

/* eslint-disable */
// @ts-nocheck
// noinspection JSUnusedGlobalSymbols
// This file is auto-generated by TanStack Router
import { createFileRoute } from '@tanstack/react-router'

// Import Routes
import { Route as rootRoute } from './routes/__root'
import { Route as LayoutDefaultImport } from './routes/_layout-default'
import { Route as LayoutDefaultCategoriesImport } from './routes/_layout-default/categories'
import { Route as LayoutDefaultFaqImport } from './routes/_layout-default/faq'
import { Route as LayoutDefaultIndexImport } from './routes/_layout-default/index'
import { Route as LayoutEmptyImport } from './routes/_layout-empty'
import { Route as LayoutEmptyProductImport } from './routes/_layout-empty/product'
import { Route as LayoutStatusDarkImport } from './routes/_layout-status-dark'
import { Route as LayoutStatusDarkConfirmationImport } from './routes/_layout-status-dark/confirmation'

// Create Virtual Routes

const LayoutStatusDarkPaymentFailedLazyImport = createFileRoute('/_layout-status-dark/payment-failed')()
const LayoutEmptyPaymentSuccessfulLazyImport = createFileRoute('/_layout-empty/payment-successful')()
const LayoutDefaultTermsAndConditionsLazyImport = createFileRoute('/_layout-default/terms-and-conditions')()
const LayoutDefaultAccessibilitystatementLazyImport = createFileRoute('/_layout-default/accessibility_statement')()
const LayoutDefaultAboutLazyImport = createFileRoute('/_layout-default/about')()

// Create/Update Routes

const LayoutStatusDarkRoute = LayoutStatusDarkImport.update({
  id: '/_layout-status-dark',
  getParentRoute: () => rootRoute,
} as any)

const LayoutEmptyRoute = LayoutEmptyImport.update({
  id: '/_layout-empty',
  getParentRoute: () => rootRoute,
} as any)

const LayoutDefaultRoute = LayoutDefaultImport.update({
  id: '/_layout-default',
  getParentRoute: () => rootRoute,
} as any)

const LayoutDefaultIndexRoute = LayoutDefaultIndexImport.update({
  path: '/',
  getParentRoute: () => LayoutDefaultRoute,
} as any)

const LayoutStatusDarkPaymentFailedLazyRoute = LayoutStatusDarkPaymentFailedLazyImport.update({
  path: '/payment-failed',
  getParentRoute: () => LayoutStatusDarkRoute,
} as any).lazy(() => import('./routes/_layout-status-dark/payment-failed.lazy').then((d) => d.Route))

const LayoutEmptyPaymentSuccessfulLazyRoute = LayoutEmptyPaymentSuccessfulLazyImport.update({
  path: '/payment-successful',
  getParentRoute: () => LayoutEmptyRoute,
} as any).lazy(() => import('./routes/_layout-empty/payment-successful.lazy').then((d) => d.Route))

const LayoutDefaultTermsAndConditionsLazyRoute = LayoutDefaultTermsAndConditionsLazyImport.update({
  path: '/terms-and-conditions',
  getParentRoute: () => LayoutDefaultRoute,
} as any).lazy(() => import('./routes/_layout-default/terms-and-conditions.lazy').then((d) => d.Route))

const LayoutDefaultAccessibilitystatementLazyRoute = LayoutDefaultAccessibilitystatementLazyImport.update({
  path: '/accessibility_statement',
  getParentRoute: () => LayoutDefaultRoute,
} as any).lazy(() => import('./routes/_layout-default/accessibility_statement.lazy').then((d) => d.Route))

const LayoutDefaultAboutLazyRoute = LayoutDefaultAboutLazyImport.update({
  path: '/about',
  getParentRoute: () => LayoutDefaultRoute,
} as any).lazy(() => import('./routes/_layout-default/about.lazy').then((d) => d.Route))

const LayoutStatusDarkConfirmationRoute = LayoutStatusDarkConfirmationImport.update({
  path: '/confirmation',
  getParentRoute: () => LayoutStatusDarkRoute,
} as any)

const LayoutEmptyProductRoute = LayoutEmptyProductImport.update({
  path: '/product',
  getParentRoute: () => LayoutEmptyRoute,
} as any)

const LayoutDefaultFaqRoute = LayoutDefaultFaqImport.update({
  path: '/faq',
  getParentRoute: () => LayoutDefaultRoute,
} as any)

const LayoutDefaultCategoriesRoute = LayoutDefaultCategoriesImport.update({
  path: '/categories',
  getParentRoute: () => LayoutDefaultRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout-default': {
      id: '/_layout-default'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutDefaultImport
      parentRoute: typeof rootRoute
    }
    '/_layout-empty': {
      id: '/_layout-empty'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutEmptyImport
      parentRoute: typeof rootRoute
    }
    '/_layout-status-dark': {
      id: '/_layout-status-dark'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutStatusDarkImport
      parentRoute: typeof rootRoute
    }
    '/_layout-default/categories': {
      id: '/_layout-default/categories'
      path: '/categories'
      fullPath: '/categories'
      preLoaderRoute: typeof LayoutDefaultCategoriesImport
      parentRoute: typeof LayoutDefaultImport
    }
    '/_layout-default/faq': {
      id: '/_layout-default/faq'
      path: '/faq'
      fullPath: '/faq'
      preLoaderRoute: typeof LayoutDefaultFaqImport
      parentRoute: typeof LayoutDefaultImport
    }
    '/_layout-empty/product': {
      id: '/_layout-empty/product'
      path: '/product'
      fullPath: '/product'
      preLoaderRoute: typeof LayoutEmptyProductImport
      parentRoute: typeof LayoutEmptyImport
    }
    '/_layout-status-dark/confirmation': {
      id: '/_layout-status-dark/confirmation'
      path: '/confirmation'
      fullPath: '/confirmation'
      preLoaderRoute: typeof LayoutStatusDarkConfirmationImport
      parentRoute: typeof LayoutStatusDarkImport
    }
    '/_layout-default/about': {
      id: '/_layout-default/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof LayoutDefaultAboutLazyImport
      parentRoute: typeof LayoutDefaultImport
    }
    '/_layout-default/accessibility_statement': {
      id: '/_layout-default/accessibility_statement'
      path: '/accessibility_statement'
      fullPath: '/accessibility_statement'
      preLoaderRoute: typeof LayoutDefaultAccessibilitystatementLazyImport
      parentRoute: typeof LayoutDefaultImport
    }
    '/_layout-default/terms-and-conditions': {
      id: '/_layout-default/terms-and-conditions'
      path: '/terms-and-conditions'
      fullPath: '/terms-and-conditions'
      preLoaderRoute: typeof LayoutDefaultTermsAndConditionsLazyImport
      parentRoute: typeof LayoutDefaultImport
    }
    '/_layout-empty/payment-successful': {
      id: '/_layout-empty/payment-successful'
      path: '/payment-successful'
      fullPath: '/payment-successful'
      preLoaderRoute: typeof LayoutEmptyPaymentSuccessfulLazyImport
      parentRoute: typeof LayoutEmptyImport
    }
    '/_layout-status-dark/payment-failed': {
      id: '/_layout-status-dark/payment-failed'
      path: '/payment-failed'
      fullPath: '/payment-failed'
      preLoaderRoute: typeof LayoutStatusDarkPaymentFailedLazyImport
      parentRoute: typeof LayoutStatusDarkImport
    }
    '/_layout-default/': {
      id: '/_layout-default/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutDefaultIndexImport
      parentRoute: typeof LayoutDefaultImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  LayoutDefaultRoute: LayoutDefaultRoute.addChildren({
    LayoutDefaultCategoriesRoute,
    LayoutDefaultFaqRoute,
    LayoutDefaultAboutLazyRoute,
    LayoutDefaultAccessibilitystatementLazyRoute,
    LayoutDefaultTermsAndConditionsLazyRoute,
    LayoutDefaultIndexRoute,
  }),
  LayoutEmptyRoute: LayoutEmptyRoute.addChildren({
    LayoutEmptyProductRoute,
    LayoutEmptyPaymentSuccessfulLazyRoute,
  }),
  LayoutStatusDarkRoute: LayoutStatusDarkRoute.addChildren({
    LayoutStatusDarkConfirmationRoute,
    LayoutStatusDarkPaymentFailedLazyRoute,
  }),
})

/* prettier-ignore-end */
